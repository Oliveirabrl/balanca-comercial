import streamlit as st
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
import time
import os
from datetime import datetime

# Fun√ß√£o para inicializar o driver do Selenium com configura√ß√µes para Streamlit Cloud
def initialize_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Modo headless para ambientes sem interface gr√°fica
    chrome_options.add_argument("--no-sandbox")  # Necess√°rio para ambientes Linux como o Streamlit Cloud
    chrome_options.add_argument("--disable-dev-shm-usage")  # Evita problemas de recursos em cont√™ineres
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")  # Evita detec√ß√£o de bots

    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        st.write("‚úÖ ChromeDriver inicializado com sucesso.")
        return driver
    except Exception as e:
        st.error(f"‚ùå Erro ao inicializar o ChromeDriver: {str(e)}")
        return None

# Fun√ß√£o para extrair dados da p√°gina
def extract_data():
    url = "https://balanca.economia.gov.br/balanca/pg_principal_bc/principais_resultados.html"
    st.write(f"üì° Acessando a URL: {url}")
    
    driver = initialize_driver()
    if driver is None:
        st.error("üö´ Falha ao inicializar o driver. N√£o √© poss√≠vel prosseguir.")
        return None, None

    try:
        st.write("‚è≥ Carregando a p√°gina...")
        driver.get(url)
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.TAG_NAME, "table"))
        )
        time.sleep(5)  # Espera adicional para garantir que a p√°gina carregue completamente
        html = driver.page_source
        st.write(f"‚úÖ P√°gina carregada com sucesso. Tamanho do HTML: {len(html)} bytes")
    except Exception as e:
        st.error(f"‚ùå Erro ao acessar a p√°gina: {str(e)}")
        driver.quit()
        return None, None
    finally:
        driver.quit()

    # Parsing do HTML
    st.write("üîç Analisando o HTML...")
    soup = BeautifulSoup(html, 'html.parser')
    tables = soup.find_all('table')
    if len(tables) < 2:
        st.error(f"üö´ Esperava-se 2 tabelas, mas foram encontradas {len(tables)}. Verifique se a estrutura da p√°gina mudou.")
        return None, None
    st.write(f"‚úÖ Encontradas {len(tables)} tabelas.")

    # Extrair tabelas
    weekly_table = tables[0]
    monthly_table = tables[1]

    # Fun√ß√£o auxiliar para extrair dados de tabelas
    def extract_table_data(table, table_name):
        st.write(f"üìã Extraindo dados da tabela: {table_name}")
        rows = table.find_all('tr')
        if not rows:
            st.error(f"üö´ Nenhuma linha encontrada na tabela {table_name}.")
            return [], []

        headers = [col.text.strip() for col in rows[0].find_all(['th', 'td'])]
        if not headers:
            st.error(f"üö´ Nenhum cabe√ßalho encontrado na tabela {table_name}.")
            return [], []

        data = []
        for row in rows[1:]:
            cols = [col.text.strip() for col in row.find_all('td')]
            if not cols:
                continue
            while len(cols) < len(headers):
                cols.append("")
            if len(cols) > len(headers):
                cols = cols[:len(headers)]
            data.append(cols)
        st.write(f"‚úÖ Extra√≠dos {len(data)} registros da tabela {table_name}.")
        return headers, data

    weekly_headers, weekly_data = extract_table_data(weekly_table, "Semanal")
    monthly_headers, monthly_data = extract_table_data(monthly_table, "Mensal")

    if not weekly_data or not monthly_data:
        st.error("üö´ Dados n√£o encontrados nas tabelas.")
        return None, None

    # Criar DataFrames
    st.write("üìä Criando DataFrames...")
    weekly_df = pd.DataFrame(weekly_data, columns=weekly_headers)
    monthly_df = pd.DataFrame(monthly_data, columns=monthly_headers)

    # Renomear colunas
    weekly_df.rename(columns={
        weekly_headers[0]: 'Per√≠odo',
        'Exporta√ß√µes': 'EXPORTA√á√ïES Valor',
        'Importa√ß√µes': 'IMPORTA√á√ïES Valor'
    }, inplace=True)
    monthly_df.rename(columns={
        monthly_headers[0]: 'M√™s',
        'Exporta√ß√µes': 'EXPORTA√á√ïES Valor',
        'Importa√ß√µes': 'IMPORTA√á√ïES Valor'
    }, inplace=True)

    # Limpar e converter valores num√©ricos
    st.write("üßπ Limpando e convertendo valores num√©ricos...")
    for df in [weekly_df, monthly_df]:
        for col in df.columns:
            if 'valor' in col.lower():
                try:
                    df[col] = pd.to_numeric(df[col].str.replace('.', '').str.replace(',', '.'), errors='coerce')
                except Exception as e:
                    st.error(f"‚ùå Erro ao converter a coluna '{col}': {str(e)}")
                    return None, None

    # Adicionar data de atualiza√ß√£o
    update_date = datetime.now()
    weekly_df['Data'] = update_date
    monthly_df['Data'] = update_date

    st.write("‚úÖ Dados extra√≠dos e processados com sucesso!")
    return weekly_df, monthly_df

# Fun√ß√£o para atualizar dados hist√≥ricos
def update_historical_data(weekly_df, monthly_df):
    weekly_file = 'historico_semanais.csv'
    monthly_file = 'historico_mensais.csv'

    # Inicializar arquivos CSV se n√£o existirem
    if not os.path.exists(weekly_file):
        pd.DataFrame(columns=['Per√≠odo', 'EXPORTA√á√ïES Valor', 'IMPORTA√á√ïES Valor', 'Data']).to_csv(weekly_file, index=False)
    if not os.path.exists(monthly_file):
        pd.DataFrame(columns=['M√™s', 'EXPORTA√á√ïES Valor', 'IMPORTA√á√ïES Valor', 'Data']).to_csv(monthly_file, index=False)

    # Atualizar arquivos
    for file, df in [(weekly_file, weekly_df), (monthly_file, monthly_df)]:
        historical = pd.read_csv(file)
        historical = pd.concat([historical, df]).drop_duplicates(subset=[df.columns[0], 'Data'])
        historical.to_csv(file, index=False)

    return pd.read_csv(weekly_file), pd.read_csv(monthly_file)

# Dashboard no Streamlit
st.title("Dashboard Balan√ßa Comercial")
st.markdown("Visualize os dados de exporta√ß√µes e importa√ß√µes da Balan√ßa Comercial Brasileira.")

if st.button("Atualizar Dados"):
    with st.spinner("Extraindo dados..."):
        weekly_df, monthly_df = extract_data()
        if weekly_df is not None and monthly_df is not None:
            weekly_historical, monthly_historical = update_historical_data(weekly_df, monthly_df)
            st.success("Dados atualizados!")
        else:
            st.error("Falha na atualiza√ß√£o.")
else:
    # Carregar dados hist√≥ricos
    weekly_historical = pd.read_csv('historico_semanais.csv') if os.path.exists('historico_semanais.csv') else pd.DataFrame()
    monthly_historical = pd.read_csv('historico_mensais.csv') if os.path.exists('historico_mensais.csv') else pd.DataFrame()

# Calcular varia√ß√£o percentual
if not weekly_historical.empty and pd.api.types.is_numeric_dtype(weekly_historical['EXPORTA√á√ïES Valor']):
    weekly_historical['Varia√ß√£o % Exporta√ß√µes'] = weekly_historical['EXPORTA√á√ïES Valor'].pct_change() * 100
if not monthly_historical.empty and pd.api.types.is_numeric_dtype(monthly_historical['EXPORTA√á√ïES Valor']):
    monthly_historical['Varia√ß√£o % Exporta√ß√µes'] = monthly_historical['EXPORTA√á√ïES Valor'].pct_change() * 100

# Exibir tabelas
st.subheader("Dados Semanais")
if not weekly_historical.empty:
    st.dataframe(weekly_historical[['Per√≠odo', 'EXPORTA√á√ïES Valor', 'IMPORTA√á√ïES Valor', 'Varia√ß√£o % Exporta√ß√µes', 'Data']])
else:
    st.warning("Nenhum dado semanal dispon√≠vel.")

st.subheader("Dados Mensais")
if not monthly_historical.empty:
    st.dataframe(monthly_historical[['M√™s', 'EXPORTA√á√ïES Valor', 'IMPORTA√á√ïES Valor', 'Varia√ß√£o % Exporta√ß√µes', 'Data']])
else:
    st.warning("Nenhum dado mensal dispon√≠vel.")

# Gr√°ficos
if not weekly_historical.empty and 'Per√≠odo' in weekly_historical.columns and 'EXPORTA√á√ïES Valor' in weekly_historical.columns:
    st.subheader("Evolu√ß√£o das Exporta√ß√µes Semanais")
    st.line_chart(weekly_historical.set_index('Per√≠odo')[['EXPORTA√á√ïES Valor']].rename(columns={'EXPORTA√á√ïES Valor': 'Exporta√ß√µes (US$)'}))

if not monthly_historical.empty and 'M√™s' in monthly_historical.columns and 'EXPORTA√á√ïES Valor' in monthly_historical.columns:
    st.subheader("Evolu√ß√£o das Exporta√ß√µes Mensais")
    st.line_chart(monthly_historical.set_index('M√™s')[['EXPORTA√á√ïES Valor']].rename(columns={'EXPORTA√á√ïES Valor': 'Exporta√ß√µes (US$)'}))
